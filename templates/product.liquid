{% section 'product-template' %}
{% section 'product-recommendations' %}
{% section 'recently-viewed' %}

{% if collection %}
  <div class="text-center page-content page-content--bottom">
    <a href="{% if collection.handle == 'frontpage' %}/{% else %}{{ collection.url }}{% endif %}" class="btn btn--small return-link">
      <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon--wide icon-arrow-left" viewBox="0 0 50 15"><path d="M50 5.38v4.25H15V15L0 7.5 15 0v5.38z"/></svg> {{ 'products.general.collection_return' | t: collection: collection.title }}
    </a>
  </div>
{% endif %}

<script>
  // Override default values of shop.strings for each template.
  // Alternate product templates can change values of
  // add to cart button, sold out, and unavailable states here.
  theme.productStrings = {
    addToCart: {{ 'products.product.add_to_cart' | t | json }},
    soldOut: {{ 'products.product.sold_out' | t | json }},
    unavailable: {{ 'products.product.unavailable' | t | json }}
  };
  
  const PRODUCT_X_VARIANT_ID_1 = 42522982776855;
  const PRODUCT_X_VARIANT_ID_2 = 42522982842391;
  const PRODUCT_X_VARIANT_ID_3 = 42523003322391;
  const PRODUCT_Y_VARIANT_ID = 42564514643991; 
  // Replace with your Product Y variant ID

  (function() {
    const VARIANT_X = 1234567890; // Your Product X variant ID

    const PRODUCT_X_VARIANT_ID_1 = 42522982776855;
    const PRODUCT_X_VARIANT_ID_2 = 42522982842391;
    const PRODUCT_X_VARIANT_ID_3 = 42523003322391;
    const PRODUCT_Y_VARIANT_ID = 42564514643991; 

    const VARIANT_Y = 9876543210; // Your free Product Y variant ID
    const QUANTITY_Y = 1;

    function initAutoAdd() {
      const forms = document.querySelectorAll('form[action^="/cart/add"]');
      forms.forEach(form => {
        form.addEventListener('submit', async (e) => {
          const formData = new FormData(form);
          const variantId = Number(formData.get('id'));
          if (
            variantId !== PRODUCT_X_VARIANT_ID_1 ||
            variantId !== PRODUCT_X_VARIANT_ID_2 ||
            variantId !== PRODUCT_X_VARIANT_ID_3
          ) return; // Only trigger for X

          e.preventDefault();

          try {
            // Add Product X
            await fetch('/cart/add.js', {
              method: 'POST',
              body: formData,
            });

            // Add Product Y
            await fetch('/cart/add.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ id: PRODUCT_Y_VARIANT_ID, quantity: QUANTITY_Y }),
            });

            // Reload cart or navigate
            window.location.href = '/cart';
          } catch (err) {
            console.error('Auto-add error', err);
            window.location.reload(); // fallback
          }
        });
      });
    }

    // Initialize on load
    document.addEventListener('DOMContentLoaded', initAutoAdd);

    // Re-init later (for AJAX theme features)
    document.addEventListener('theme:load', initAutoAdd);
  })();
</script>

{% render 'judgeme_widgets', widget_type: 'judgeme_review_widget', concierge_install: true, auto_install: true, product: product %}